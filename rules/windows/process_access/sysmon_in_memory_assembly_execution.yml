filter: 'winlog.event_data.CallTrace: ("C:\Windows\SYSTEM32\ntdll.dll+*|C:\Windows\System32\KERNELBASE.dll+*|UNKNOWN(*)"
  OR "*UNKNOWN(*)|UNKNOWN(*)") OR (winlog.event_data.CallTrace: "*UNKNOWN*" AND winlog.event_data.GrantedAccess:
  ("0x1F0FFF" OR "0x1F1FFF" OR "0x143A" OR "0x1410" OR "0x1010" OR "0x1F2FFF" OR "0x1F3FFF"
  OR "0x1FFFFF"))'
pre_detector:
  case_condition: directly
  id: 5f113a8f-8b61-41ca-b90f-d374fa7e4a39
  mitre:
  - attack.privilege_escalation
  - attack.defense_evasion
  - attack.t1055.001
  - attack.t1055.002
  - attack.t1055
  severity: critical
  title: Suspicious In-Memory Module Execution
sigma_fields: true
description: Detects the access to processes by other suspicious processes which have
  reflectively loaded libraries in their memory space. An example is SilentTrinity
  C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a stack
  call to a dll loaded from disk (the standard way), it will display "UNKNOWN" as
  the module name. Usually this means the stack call points to a module that was reflectively
  loaded in memory. Adding to this, it is not common to see such few calls in the
  stack (ntdll.dll --> kernelbase.dll --> unknown) which essentially means that most
  of the functions required by the process to execute certain routines are already
  present in memory, not requiring any calls to external libraries. The latter should
  also be considered suspicious.